// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/acm/menu.proto

package omo_msp_acm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MenuService service

type MenuService interface {
	AddOne(ctx context.Context, in *ReqMenuAdd, opts ...client.CallOption) (*ReplyMenuInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyMenuInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyMenuList, error)
	UpdateBase(ctx context.Context, in *ReqMenuUpdate, opts ...client.CallOption) (*ReplyMenuInfo, error)
}

type menuService struct {
	c    client.Client
	name string
}

func NewMenuService(name string, c client.Client) MenuService {
	return &menuService{
		c:    c,
		name: name,
	}
}

func (c *menuService) AddOne(ctx context.Context, in *ReqMenuAdd, opts ...client.CallOption) (*ReplyMenuInfo, error) {
	req := c.c.NewRequest(c.name, "MenuService.AddOne", in)
	out := new(ReplyMenuInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyMenuInfo, error) {
	req := c.c.NewRequest(c.name, "MenuService.GetOne", in)
	out := new(ReplyMenuInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "MenuService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuService) GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyMenuList, error) {
	req := c.c.NewRequest(c.name, "MenuService.GetAll", in)
	out := new(ReplyMenuList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuService) UpdateBase(ctx context.Context, in *ReqMenuUpdate, opts ...client.CallOption) (*ReplyMenuInfo, error) {
	req := c.c.NewRequest(c.name, "MenuService.UpdateBase", in)
	out := new(ReplyMenuInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MenuService service

type MenuServiceHandler interface {
	AddOne(context.Context, *ReqMenuAdd, *ReplyMenuInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyMenuInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAll(context.Context, *RequestInfo, *ReplyMenuList) error
	UpdateBase(context.Context, *ReqMenuUpdate, *ReplyMenuInfo) error
}

func RegisterMenuServiceHandler(s server.Server, hdlr MenuServiceHandler, opts ...server.HandlerOption) error {
	type menuService interface {
		AddOne(ctx context.Context, in *ReqMenuAdd, out *ReplyMenuInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyMenuInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAll(ctx context.Context, in *RequestInfo, out *ReplyMenuList) error
		UpdateBase(ctx context.Context, in *ReqMenuUpdate, out *ReplyMenuInfo) error
	}
	type MenuService struct {
		menuService
	}
	h := &menuServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MenuService{h}, opts...))
}

type menuServiceHandler struct {
	MenuServiceHandler
}

func (h *menuServiceHandler) AddOne(ctx context.Context, in *ReqMenuAdd, out *ReplyMenuInfo) error {
	return h.MenuServiceHandler.AddOne(ctx, in, out)
}

func (h *menuServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyMenuInfo) error {
	return h.MenuServiceHandler.GetOne(ctx, in, out)
}

func (h *menuServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.MenuServiceHandler.RemoveOne(ctx, in, out)
}

func (h *menuServiceHandler) GetAll(ctx context.Context, in *RequestInfo, out *ReplyMenuList) error {
	return h.MenuServiceHandler.GetAll(ctx, in, out)
}

func (h *menuServiceHandler) UpdateBase(ctx context.Context, in *ReqMenuUpdate, out *ReplyMenuInfo) error {
	return h.MenuServiceHandler.UpdateBase(ctx, in, out)
}
