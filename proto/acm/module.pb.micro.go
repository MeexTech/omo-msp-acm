// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/acm/module.proto

package omo_msp_acm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ModuleService service

type ModuleService interface {
	AddOne(ctx context.Context, in *ReqModuleAdd, opts ...client.CallOption) (*ReplyModuleInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyModuleInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAll(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyModuleList, error)
	UpdateBase(ctx context.Context, in *ReqModuleUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateMenus(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
}

type moduleService struct {
	c    client.Client
	name string
}

func NewModuleService(name string, c client.Client) ModuleService {
	return &moduleService{
		c:    c,
		name: name,
	}
}

func (c *moduleService) AddOne(ctx context.Context, in *ReqModuleAdd, opts ...client.CallOption) (*ReplyModuleInfo, error) {
	req := c.c.NewRequest(c.name, "ModuleService.AddOne", in)
	out := new(ReplyModuleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyModuleInfo, error) {
	req := c.c.NewRequest(c.name, "ModuleService.GetOne", in)
	out := new(ReplyModuleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ModuleService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleService) GetAll(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyModuleList, error) {
	req := c.c.NewRequest(c.name, "ModuleService.GetAll", in)
	out := new(ReplyModuleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleService) UpdateBase(ctx context.Context, in *ReqModuleUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ModuleService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleService) UpdateMenus(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "ModuleService.UpdateMenus", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModuleService service

type ModuleServiceHandler interface {
	AddOne(context.Context, *ReqModuleAdd, *ReplyModuleInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyModuleInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAll(context.Context, *RequestPage, *ReplyModuleList) error
	UpdateBase(context.Context, *ReqModuleUpdate, *ReplyInfo) error
	UpdateMenus(context.Context, *RequestList, *ReplyList) error
}

func RegisterModuleServiceHandler(s server.Server, hdlr ModuleServiceHandler, opts ...server.HandlerOption) error {
	type moduleService interface {
		AddOne(ctx context.Context, in *ReqModuleAdd, out *ReplyModuleInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyModuleInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAll(ctx context.Context, in *RequestPage, out *ReplyModuleList) error
		UpdateBase(ctx context.Context, in *ReqModuleUpdate, out *ReplyInfo) error
		UpdateMenus(ctx context.Context, in *RequestList, out *ReplyList) error
	}
	type ModuleService struct {
		moduleService
	}
	h := &moduleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ModuleService{h}, opts...))
}

type moduleServiceHandler struct {
	ModuleServiceHandler
}

func (h *moduleServiceHandler) AddOne(ctx context.Context, in *ReqModuleAdd, out *ReplyModuleInfo) error {
	return h.ModuleServiceHandler.AddOne(ctx, in, out)
}

func (h *moduleServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyModuleInfo) error {
	return h.ModuleServiceHandler.GetOne(ctx, in, out)
}

func (h *moduleServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ModuleServiceHandler.RemoveOne(ctx, in, out)
}

func (h *moduleServiceHandler) GetAll(ctx context.Context, in *RequestPage, out *ReplyModuleList) error {
	return h.ModuleServiceHandler.GetAll(ctx, in, out)
}

func (h *moduleServiceHandler) UpdateBase(ctx context.Context, in *ReqModuleUpdate, out *ReplyInfo) error {
	return h.ModuleServiceHandler.UpdateBase(ctx, in, out)
}

func (h *moduleServiceHandler) UpdateMenus(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.ModuleServiceHandler.UpdateMenus(ctx, in, out)
}
