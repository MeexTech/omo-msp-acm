// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/acm/role.proto

package omo_msp_acm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RoleService service

type RoleService interface {
	AddOne(ctx context.Context, in *ReqRoleAdd, opts ...client.CallOption) (*ReplyRoleInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRoleInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAll(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyRoleList, error)
	UpdateBase(ctx context.Context, in *ReqRoleUpdate, opts ...client.CallOption) (*ReplyRoleInfo, error)
	AppendMenu(ctx context.Context, in *ReqRoleMenus, opts ...client.CallOption) (*ReplyRoleMenu, error)
	SubtractMenu(ctx context.Context, in *ReqRoleMenus, opts ...client.CallOption) (*ReplyRoleMenu, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) AddOne(ctx context.Context, in *ReqRoleAdd, opts ...client.CallOption) (*ReplyRoleInfo, error) {
	req := c.c.NewRequest(c.name, "RoleService.AddOne", in)
	out := new(ReplyRoleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRoleInfo, error) {
	req := c.c.NewRequest(c.name, "RoleService.GetOne", in)
	out := new(ReplyRoleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "RoleService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetAll(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyRoleList, error) {
	req := c.c.NewRequest(c.name, "RoleService.GetAll", in)
	out := new(ReplyRoleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) UpdateBase(ctx context.Context, in *ReqRoleUpdate, opts ...client.CallOption) (*ReplyRoleInfo, error) {
	req := c.c.NewRequest(c.name, "RoleService.UpdateBase", in)
	out := new(ReplyRoleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) AppendMenu(ctx context.Context, in *ReqRoleMenus, opts ...client.CallOption) (*ReplyRoleMenu, error) {
	req := c.c.NewRequest(c.name, "RoleService.AppendMenu", in)
	out := new(ReplyRoleMenu)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) SubtractMenu(ctx context.Context, in *ReqRoleMenus, opts ...client.CallOption) (*ReplyRoleMenu, error) {
	req := c.c.NewRequest(c.name, "RoleService.SubtractMenu", in)
	out := new(ReplyRoleMenu)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	AddOne(context.Context, *ReqRoleAdd, *ReplyRoleInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyRoleInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAll(context.Context, *RequestPage, *ReplyRoleList) error
	UpdateBase(context.Context, *ReqRoleUpdate, *ReplyRoleInfo) error
	AppendMenu(context.Context, *ReqRoleMenus, *ReplyRoleMenu) error
	SubtractMenu(context.Context, *ReqRoleMenus, *ReplyRoleMenu) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		AddOne(ctx context.Context, in *ReqRoleAdd, out *ReplyRoleInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyRoleInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAll(ctx context.Context, in *RequestPage, out *ReplyRoleList) error
		UpdateBase(ctx context.Context, in *ReqRoleUpdate, out *ReplyRoleInfo) error
		AppendMenu(ctx context.Context, in *ReqRoleMenus, out *ReplyRoleMenu) error
		SubtractMenu(ctx context.Context, in *ReqRoleMenus, out *ReplyRoleMenu) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) AddOne(ctx context.Context, in *ReqRoleAdd, out *ReplyRoleInfo) error {
	return h.RoleServiceHandler.AddOne(ctx, in, out)
}

func (h *roleServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyRoleInfo) error {
	return h.RoleServiceHandler.GetOne(ctx, in, out)
}

func (h *roleServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.RoleServiceHandler.RemoveOne(ctx, in, out)
}

func (h *roleServiceHandler) GetAll(ctx context.Context, in *RequestPage, out *ReplyRoleList) error {
	return h.RoleServiceHandler.GetAll(ctx, in, out)
}

func (h *roleServiceHandler) UpdateBase(ctx context.Context, in *ReqRoleUpdate, out *ReplyRoleInfo) error {
	return h.RoleServiceHandler.UpdateBase(ctx, in, out)
}

func (h *roleServiceHandler) AppendMenu(ctx context.Context, in *ReqRoleMenus, out *ReplyRoleMenu) error {
	return h.RoleServiceHandler.AppendMenu(ctx, in, out)
}

func (h *roleServiceHandler) SubtractMenu(ctx context.Context, in *ReqRoleMenus, out *ReplyRoleMenu) error {
	return h.RoleServiceHandler.SubtractMenu(ctx, in, out)
}
