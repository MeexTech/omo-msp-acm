// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/acm/cata.proto

package omo_msp_acm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CatalogService service

type CatalogService interface {
	AddOne(ctx context.Context, in *ReqCatalogAdd, opts ...client.CallOption) (*ReplyCatalogInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCatalogInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCatalogList, error)
	UpdateBase(ctx context.Context, in *ReqCatalogUpdate, opts ...client.CallOption) (*ReplyCatalogInfo, error)
}

type catalogService struct {
	c    client.Client
	name string
}

func NewCatalogService(name string, c client.Client) CatalogService {
	return &catalogService{
		c:    c,
		name: name,
	}
}

func (c *catalogService) AddOne(ctx context.Context, in *ReqCatalogAdd, opts ...client.CallOption) (*ReplyCatalogInfo, error) {
	req := c.c.NewRequest(c.name, "CatalogService.AddOne", in)
	out := new(ReplyCatalogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCatalogInfo, error) {
	req := c.c.NewRequest(c.name, "CatalogService.GetOne", in)
	out := new(ReplyCatalogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CatalogService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCatalogList, error) {
	req := c.c.NewRequest(c.name, "CatalogService.GetAll", in)
	out := new(ReplyCatalogList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) UpdateBase(ctx context.Context, in *ReqCatalogUpdate, opts ...client.CallOption) (*ReplyCatalogInfo, error) {
	req := c.c.NewRequest(c.name, "CatalogService.UpdateBase", in)
	out := new(ReplyCatalogInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatalogService service

type CatalogServiceHandler interface {
	AddOne(context.Context, *ReqCatalogAdd, *ReplyCatalogInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyCatalogInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAll(context.Context, *RequestInfo, *ReplyCatalogList) error
	UpdateBase(context.Context, *ReqCatalogUpdate, *ReplyCatalogInfo) error
}

func RegisterCatalogServiceHandler(s server.Server, hdlr CatalogServiceHandler, opts ...server.HandlerOption) error {
	type catalogService interface {
		AddOne(ctx context.Context, in *ReqCatalogAdd, out *ReplyCatalogInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyCatalogInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAll(ctx context.Context, in *RequestInfo, out *ReplyCatalogList) error
		UpdateBase(ctx context.Context, in *ReqCatalogUpdate, out *ReplyCatalogInfo) error
	}
	type CatalogService struct {
		catalogService
	}
	h := &catalogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CatalogService{h}, opts...))
}

type catalogServiceHandler struct {
	CatalogServiceHandler
}

func (h *catalogServiceHandler) AddOne(ctx context.Context, in *ReqCatalogAdd, out *ReplyCatalogInfo) error {
	return h.CatalogServiceHandler.AddOne(ctx, in, out)
}

func (h *catalogServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyCatalogInfo) error {
	return h.CatalogServiceHandler.GetOne(ctx, in, out)
}

func (h *catalogServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.CatalogServiceHandler.RemoveOne(ctx, in, out)
}

func (h *catalogServiceHandler) GetAll(ctx context.Context, in *RequestInfo, out *ReplyCatalogList) error {
	return h.CatalogServiceHandler.GetAll(ctx, in, out)
}

func (h *catalogServiceHandler) UpdateBase(ctx context.Context, in *ReqCatalogUpdate, out *ReplyCatalogInfo) error {
	return h.CatalogServiceHandler.UpdateBase(ctx, in, out)
}
